
題目 : 建立一個10*4陣列，將全班10人的學號，數學成績，計概成績放入陣列中(直接置於程式內)。
建立一個指標陣列，指標分別指向這十位同學的姓名的字串變數，
根據每個學生的平均成績，由大到小排序，印出美觀、大方的全班成績表(包含姓名、學號、成績、平均、名次)，
並印出最高平均成績與最低平均成績的同學和分數。
需使用排序、報表、中位數、取平均副程式，
資料交換需使用副程式p.322的swap( )副程式完成。


#include <stdio.h>
#define SIZE 4
#define stu 10
//int binarySearch(int b[], int searchKey, int low, int high);
void sort(int a[][SIZE], int size);
// function main begins program execution
int main(void)
{
    int key,result=0,i,j;
    // initialize a
    int a[10][SIZE] = {{2,98,72,0},
						{3,76,32,0},
						{6,98,67,0},
						{7,89,32,0},
						{8,98,55,0},
						{9,89,32,0},
						{10,98,65,0},
						{11,99,32,0},
						{12,98,71,0},
						{13,76,91,0},};

    puts("Data items in original order");
    // output original array
    for(j=0;j<10;j++)
    {	for (i = 1; i < SIZE-1; ++i) {
        	a[j][3]+=a[j][i];
    	}
	}
    
    for(j=0;j<10;j++)
    {	for (i = 0; i < SIZE; ++i) {
        	printf("%4d", a[j][i]);
    	}
    	printf("\n");
	}
    
/*    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[1][i]);
    }
*/
    // bubble sort                                         
    // loop to control number of passes                    

    sort(a, stu);
    puts("\nData items in ascending order");

    for(j=0;j<10;j++)
    {	for (i = 0; i < SIZE; ++i) {
        	printf("%4d", a[j][i]);
    	}
    	printf("\n");
	}

}


void sort(int a[][SIZE], int size)
{
    int hold,pass,i;
    for (pass = 1; pass < size; ++pass) {

        // loop to control number of comparisons per pass   
        for (i = 0; i < size - pass; ++i) {

            // compare adjacent elements and swap them if first 
            // element is greater than second element           
            if (a[i][3] > a[i + 1][3]) {
                swap(&a[i][0], &a[i+1][0]);
                swap(&a[i][1], &a[i+1][1]);
                swap(&a[i][2], &a[i+1][2]);
                swap(&a[i][3], &a[i+1][3]);
            }
        }
    }

}

void swap(int *e1Ptr,int*e2Ptr)
{int hold;
hold=*e1Ptr;
*e1Ptr=*e2Ptr;
*e2Ptr=hold;
}




//建議解

#include <stdio.h>
#define SIZE 4
#define stu 13
//int binarySearch(int b[], int searchKey, int low, int high);
void sort(char **name, int a[][SIZE], int size);
// function main begins program execution
int main(void)
{
    int key,result=0,i,j;
    // initialize a
    int a[stu][SIZE] = {{2,98,72,0},
						{3,76,32,0},
						{6,98,67,0},
						{7,89,32,0},
						{8,98,55,0},
						{9,89,32,0},
						{10,98,65,0},
						{11,99,32,0},
						{12,98,71,0},
						{13,76,91,0},
						{18,93,49,0},
						{19,67,82,0},
						{20,66,98,0},}; 
char *name[stu] =
      {"Alice", 
	   "Danny",
	   "Tom",
	   "Nina",         
       "May", 
	   "Sindy", 
	   "Steven", 
	   "Ellen",         
       "Nicole", 
	   "Tan", 
	   "Jenny",
	   "Bob",
	   "Tim"};


    puts("Name ID items in original order");
    // output original array
    for(j=0;j<stu;j++)
    {	for (i = 1; i < SIZE-1; ++i) {
        	a[j][3]+=a[j][i];
    	}
	}
    
    for(j=0;j<stu;j++)
    {	printf("%8s", name[j]);
		for (i = 0; i < SIZE; ++i) {
    	    printf("%4d", a[j][i]);
    	}
    	printf("\n");
	}
    
/*    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[1][i]);
    }
*/
    // bubble sort                                         
    // loop to control number of passes                    

    sort(name, a, stu);
    puts("\nData items in ascending order");

    for(j=0;j<stu;j++)
    {	printf("%8s", name[j]);
		for (i = 0; i < SIZE; ++i) {
        	printf("%4d", a[j][i]);
    	}
    	printf("\n");
	}

}


void sort(char **name, int a[][SIZE], int size)
{char *ptr;
    int hold,pass,i;
    for (pass = 1; pass < size; ++pass) {

        // loop to control number of comparisons per pass   
        for (i = 0; i < size - pass; ++i) {

            // compare adjacent elements and swap them if first 
            // element is greater than second element           
            if (a[i][3] < a[i + 1][3]) {
                ptr=name[i];
				name[i]=name[i+1];
				name[i+1]=ptr;
				swap(&a[i][0], &a[i+1][0]);
                swap(&a[i][1], &a[i+1][1]);
                swap(&a[i][2], &a[i+1][2]);
                swap(&a[i][3], &a[i+1][3]);
            }
        }
    }

}

void swap(int *e1Ptr,int *e2Ptr)
{int hold;
hold=*e1Ptr;
*e1Ptr=*e2Ptr;
*e2Ptr=hold;
}
